
import "print.lang";

// iface math(A, B) {
//     func do_math(A, B);
// }
//
// impl math(i32, i32) {
//     func do_math(a: i32, b: i32): i32 {
//         let x: i32 = a * 5 + b;
//         return x + 3;
//     }
// }
//
// impl math(f64, f64) {
//     func do_math(a: f64, b: f64): f64 {
//         let x: f64 = a * 5.8 + b;
//         return x + 3.2;
//     }
// }
//
//
// // func do_math(a: i32, b: i32): i32 {
// //     let x: i32 = a * 5 + b;
// //     return x + 3;
// // }
// // func do_math(a: f64, b: f64): f64 {
// //     return a;
// // }
//
struct S1 {
    mut f: i32;
}

struct foo {
    mut ddd: i32;
    pupu: i32;
    s1: *S1;
}

impl printable(foo) {
    func printValue(value: *foo): void {
        printf("foo: { ddd: %d, pupu: %d, s1.f: %d }", value.ddd, value.pupu, value.s1.f);
    }
}

impl printable(S1) {
    func printValue(value: S1): void {
        printf("S1: %d", value.f);
    }
}

//
// func onfoo(a: *foo): *foo
// {
//     a.s1.f = 9;
//     a.ddd = 99;
//     return a;
// }
//

func rettuple(a: i32): (i32, i32)
{
    return (a, a * a);
}

func doo(mut a: i32): i32
{
    a = 3;
    return a;
}

func input(): i32
{
    let c = getchar();
    if (c == '1') {
        return 1;
    } else { if ( c == '2') {
        return 2;
    } else { if ( c == '3') {
        return 3;
    } else { if ( c == '4') {
        return 4;
    } else { if ( c == '5') {
        return 5;
    } else { if ( c == '6') {
        return 6;
    } else { if ( c == '7') {
        return 7;
    } else { if ( c == '8') {
        return 8;
    } else { if ( c == '9') {
        return 9;
    }}}}}}}}}
    return 0;
}

func main(): i32 {
    let mut gg = 3;

    gg = 0;
//     doo(gg);
    let sss: S1 = { f = 3 };
    let bla: foo = { ddd = gg, pupu = 9, s1 = sss };
//     let bla2: foo = { ddd = 3, pupu = 9, s1 = &sss };

let mut bb = &bla;
bb.ddd = 45;

// //     gg=3;
//     bla.s1.f=4;
//     print(bla.s1.f * 4);
//
//     print(5.4);
//
   let tuple = ( 3, "ooi{}\n", 4 );

   let (mut t1, t2) = tuple;
   t1 = 5;
//    doo(t1);

//     print(tuple.2.1 *3+3);
//
//     let (t1, tup) = (3,4);

//     print(t1);
//     print(tup.1.0);

let tup = (2,3,bla);
let aaa = tup.2.ddd;

let mut i = 0;
while (i < 10) {
    print("loop {}\n", i);
    i = i + 1;
}

// aaa.0=3;

// printValue(sss);
// printValue(bla);

// bar((2,3));
// print(3);
// printf("%f\n",4.3);
// tuple.bar();

// let dd = tuple.count()<1;
// dd.print();

// tuple.print();
// printValues(4,5,gg,sss);

let s = bla.s1.f;

let t = rettuple(3);
let tt = t;

print("arg 1: '{}', arg 2: '{}', ecc '{}' '{}' '{}'\n", aaa, tt.1, sss, "poop", bla);
// print("c {}\n",tup.count());

// let tup = tuple;
// print("{} {}\n", tup);

// bar(tuple);

// //
//     let m = do_math(bla.ddd, bla.s1.f);
// // //
//     let fm = do_math(3.4, 1.2);
// // // // //let m = do_math(a = 4, b = 5)
// // // //     //echo(toPrint = m)
// // // //     //printi(val=3)
// // // //
//     let s = "printf 1: '%s' 2: '%f' 3: '%f'\n";
//
//     printf(s, "blab", fm, tuple.2.0 * 4.2);
//
//     print(bla.0);
// //     (2,5,6,7).(2,0).do_math().print();
// //     puts("llll");
// //
// //     print(3.3);
// //     3.3.print();
// //     do_math(3, 1).print();
// //     3.do_math(1).print();
// //     (3, 1).do_math().print();
//
// //     onfoo(&bla);
//     bla.print();
//     bla.onfoo().print();
//     print(bla);
//     print(bla.ddd);

//     printf("ll %d\n",bla.ddd);

    print("\nPlease input one number between 0 and 9\n");
    let mut num = input();

//     print("divide: 100/{} = {}\n", num, 100 / num); //error

    if (num == 0) {
        print("cannot divide\n");
        return 0;
    }

    print("divide: 100/{} = {}\n", num, 100 / num); //no error

    num = 0;
//     print("divide: 100/{} = {}\n", num, 100 / num); //error

    num = 1;
    print("divide: 100/{} = {}\n", num, 100 / num); //no error

    let mut val: i32|$ > 10 = 30; //this has type i32|$ > 10
    let mut vcopy = val; //this is a i32
    let mut vptr = &val; //this is a *(i32|$ > 10)

    let mut vptr2: *i32|$ > 10 = &val; // ok
//     let mut vptr3: *i32 = &val; // error

//     val = 3; // error
    val = 30; // ok

    vcopy = 1; // ok

//     vptr = 4; // error
    vptr = 40; // ok

    return gg;
}



//echo(do_math(bla.ddd, bla.pupu))
//echo(do_math(12))
//printi(10)
